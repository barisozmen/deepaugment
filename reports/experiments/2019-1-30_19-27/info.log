DEBUG:matplotlib:CACHEDIR=/home/ubuntu/.cache/matplotlib
DEBUG:matplotlib.font_manager:Using fontManager instance from /home/ubuntu/.cache/matplotlib/fontList.json
DEBUG:matplotlib.backends:backend agg version v2.2
DEBUG:shapely.geos:Found GEOS DLL: <CDLL '/home/ubuntu/anaconda3/lib/python3.6/site-packages/shapely/.libs/libgeos_c-bd8d3f16.so.1.10.2', handle 563ae0545d50 at 0x7f601849df28>, using it.
DEBUG:shapely.geos:Trying `CDLL(libc.so.6)`
DEBUG:shapely.geos:Library path: 'libc.so.6'
DEBUG:shapely.geos:DLL: <CDLL 'libc.so.6', handle 7f60822226d0 at 0x7f601849dc50>
INFO:root:In objective function with params: [1, 0.8399490437724051]
INFO:root:Objective function value is 0.61324
INFO:root:In objective function with params: [1, 0.569311327434681]
INFO:root:Objective function value is 0.6192
INFO:root:In objective function with params: [2, 0.018748008650431806]
INFO:root:Objective function value is 0.59616
INFO:root:In objective function with params: [1, 0.24788829722603561]
INFO:root:Objective function value is 0.59996
INFO:root:In objective function with params: [1, 0.6948236527284698]
INFO:root:Objective function value is 0.62536
INFO:root:In objective function with params: [1, 0.45317230112212936]
INFO:root:Objective function value is 0.61612
INFO:root:In objective function with params: [2, 0.3539050718862929]
INFO:root:Objective function value is 0.5900399999999999
INFO:root:In objective function with params: [2, 0.9133014457224451]
INFO:root:Objective function value is 0.59528
INFO:root:In objective function with params: [3, 0.9736482669357395]
INFO:root:Objective function value is 0.62196
INFO:root:In objective function with params: [2, 0.5527719503903769]
INFO:root:Objective function value is 0.59592
INFO:root:In objective function with params: [4, 0.0]
INFO:root:Objective function value is 0.59344
INFO:root:In objective function with params: [4, 0.0]
INFO:root:Objective function value is 0.59416
INFO:root:In objective function with params: [4, 0.0]
INFO:root:Objective function value is 0.59288
INFO:root:In objective function with params: [4, 0.0]
INFO:root:Objective function value is 0.5902000000000001
INFO:root:In objective function with params: [4, 0.0]
INFO:root:Objective function value is 0.59168
INFO:root:In objective function with params: [4, 1.0]
INFO:root:Objective function value is 0.62432
INFO:root:In objective function with params: [3, 0.0]
INFO:root:Objective function value is 0.5931599999999999
INFO:root:In objective function with params: [2, 0.0]
INFO:root:Objective function value is 0.59444
INFO:root:In objective function with params: [3, 0.0]
INFO:root:Objective function value is 0.5938399999999999
INFO:root:In objective function with params: [2, 0.0]
INFO:root:Objective function value is 0.59304
INFO:root:          fun: 0.5900399999999999
    func_vals: array([0.61324, 0.6192 , 0.59616, 0.59996, 0.62536, 0.61612, 0.59004,
       0.59528, 0.62196, 0.59592, 0.59344, 0.59416, 0.59288, 0.5902 ,
       0.59168, 0.62432, 0.59316, 0.59444, 0.59384, 0.59304])
       models: [GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),
             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,
             optimizer='fmin_l_bfgs_b', random_state=218175338), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),
             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,
             optimizer='fmin_l_bfgs_b', random_state=218175338), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),
             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,
             optimizer='fmin_l_bfgs_b', random_state=218175338), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),
             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,
             optimizer='fmin_l_bfgs_b', random_state=218175338), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),
             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,
             optimizer='fmin_l_bfgs_b', random_state=218175338), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),
             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,
             optimizer='fmin_l_bfgs_b', random_state=218175338), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),
             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,
             optimizer='fmin_l_bfgs_b', random_state=218175338), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),
             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,
             optimizer='fmin_l_bfgs_b', random_state=218175338), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),
             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,
             optimizer='fmin_l_bfgs_b', random_state=218175338), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),
             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,
             optimizer='fmin_l_bfgs_b', random_state=218175338), GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5) + WhiteKernel(noise_level=1),
             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,
             optimizer='fmin_l_bfgs_b', random_state=218175338)]
 random_state: <mtrand.RandomState object at 0x7f6054d94ee8>
        space: Space([Integer(low=1, high=4),
       Real(low=0.0, high=1.0, prior='uniform', transform='normalize')])
        specs: {'args': {'n_jobs': 1, 'kappa': 1.96, 'xi': 0.01, 'n_restarts_optimizer': 5, 'n_points': 10000, 'callback': None, 'verbose': False, 'random_state': <mtrand.RandomState object at 0x7f6054d94ee8>, 'y0': None, 'x0': None, 'acq_optimizer': 'auto', 'acq_func': 'gp_hedge', 'n_random_starts': 10, 'n_calls': 20, 'base_estimator': GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,
             kernel=1**2 * Matern(length_scale=[1, 1], nu=2.5),
             n_restarts_optimizer=2, noise='gaussian', normalize_y=True,
             optimizer='fmin_l_bfgs_b', random_state=218175338), 'dimensions': Space([Integer(low=1, high=4),
       Real(low=0.0, high=1.0, prior='uniform', transform='normalize')]), 'func': <function run_bayesianopt.<locals>.objective_function at 0x7f606bf297b8>}, 'function': 'base_minimize'}
            x: [2, 0.3539050718862929]
      x_iters: [[1, 0.8399490437724051], [1, 0.569311327434681], [2, 0.018748008650431806], [1, 0.24788829722603561], [1, 0.6948236527284698], [1, 0.45317230112212936], [2, 0.3539050718862929], [2, 0.9133014457224451], [3, 0.9736482669357395], [2, 0.5527719503903769], [4, 0.0], [4, 0.0], [4, 0.0], [4, 0.0], [4, 0.0], [4, 1.0], [3, 0.0], [2, 0.0], [3, 0.0], [2, 0.0]]
